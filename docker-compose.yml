version: "3.9"

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: lorawan
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: appsecret
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d lorawan"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [appnet]

  # Aplica el schema después de que la DB esté saludable (evita choques si ya hay datos)
  initdb:
    image: postgres:16
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGPASSWORD: appsecret
    volumes:
      - ./backend/schema.sql:/schema.sql:ro
    command: >
      bash -lc "psql -h db -U appuser -d lorawan -v ON_ERROR_STOP=1 -f /schema.sql"
    networks: [appnet]
    restart: "no"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://appuser:appsecret@db:5432/lorawan
      WEBHOOK_SECRET: change-me
      ADMIN_USER: admin
      ADMIN_PASS: admin
      TTN_REGION: nam1
      TTN_TENANT: ttn
      TTN_APP_ID: your-app-id
      TTN_API_KEY: your-tts-api-key
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    networks: [appnet]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://backend:8000   # el frontend llama interno al backend
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    expose:
      - "3000"
    networks: [appnet]

  # Nginx Proxy Manager (panel web en :81; expone 80/443)
  npm:
    image: jc21/nginx-proxy-manager:latest
    restart: always
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks: [appnet]

volumes:
  dbdata:
  npm_data:
  npm_letsencrypt:

networks:
  appnet:
    driver: bridge
